package br.com.neolog.welcomekit.services;

import static br.com.neolog.welcomekit.CartStatus.ACTIVE;
import static br.com.neolog.welcomekit.CustomerLocal.getCurrentCustomerId;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import br.com.neolog.welcomekit.exceptions.item.CartItemIllegalQuantityException;
import br.com.neolog.welcomekit.exceptions.product.ProductNotFoundException;
import br.com.neolog.welcomekit.models.Cart;
import br.com.neolog.welcomekit.models.CartItem;
import br.com.neolog.welcomekit.models.Customer;
import br.com.neolog.welcomekit.models.Product;
import br.com.neolog.welcomekit.repository.CartItemRepository;
import br.com.neolog.welcomekit.repository.CartRepository;
import br.com.neolog.welcomekit.repository.CustomerRepository;
import br.com.neolog.welcomekit.repository.ProductRepository;

@Service
public class CartService
{

    @Autowired
    private CartItemRepository cartItemRepository;

    @Autowired
    private ProductRepository productRepository;

    @Autowired
    private CartRepository cartRepository;

    @Autowired
    private StockService stockService;

    @Autowired
    private CustomerRepository customerRepository;

    public Cart save(
        final Cart cart )
    {
        return cartRepository.save( cart );
    }

    public CartItem addItem(
        final CartItem item )
    {
        final Cart cart = getActiveCart( customerRepository.findById( getCurrentCustomerId() ) );
        final Product product = productRepository.findByCode( item.getProduct().getCode() );
        if( product == null ) {
            throw new ProductNotFoundException( "This product not exists" );
        }
        item.setProduct( product );
        item.setCart( cart );

        if( item.getQuantity() > stockService.findQuantityStockByProductCode( product.getCode() ) ) {
            throw new CartItemIllegalQuantityException( "This quantity is greater than stock" );
        }
        return cartItemRepository.save( item );
    }

    public void removeItem(
        final Integer productCode )
    {
        final Cart cart = getActiveCart( customerRepository.findById( getCurrentCustomerId() ) );
        final Product product = productRepository.findByCode( productCode );
        if( product == null ) {
            throw new ProductNotFoundException( "This product not exists" );
        }
        final CartItem item = cartItemRepository.findByProductAndCart( product, cart );
        cartItemRepository.delete( item );
    }

    

    private Cart getActiveCart(
        final Customer customer )
    {
        final Cart cart = cartRepository.findByCustomerIdAndCartStatus( customer.getId(), ACTIVE );
        if( cart != null ) {
            return cart;
        }
        return save( new Cart( customerRepository.findById( getCurrentCustomerId() ), 0L, ACTIVE ) );
    }

}
