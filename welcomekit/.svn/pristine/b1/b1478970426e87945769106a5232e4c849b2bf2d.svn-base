package br.com.neolog.welcomekit.models;

import static java.util.Objects.requireNonNull;

import java.util.Objects;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Pattern;

import com.google.common.base.MoreObjects;

@Entity
@Table( name = "customer" )
public class Customer
{
    @Id
    @GeneratedValue( strategy = GenerationType.SEQUENCE, generator = "customer_sequence" )
    @SequenceGenerator( name = "customer_sequence", sequenceName = "customer_sequence", initialValue = 1, allocationSize = 1 )
    private Integer id;

    @NotBlank( message = "this field can not be empty or null" )
    @Pattern( regexp = "[a-z0-9]+[a-z0-9.]+@[a-z0-9]+\\.[a-z0-9]+(\\.[a-z0-9]+)?", message = "Formato de email inv√°lido" )
    private String email;

    @Column
    @NotBlank( message = "this field can not be empty or null" )
    private String name;

    @Column
    @NotBlank( message = "this field can not be empty or null" )
    private String password;

    @Column
    private boolean inactive;

    public Customer()
    {

    }

    public Customer(
        final String email,
        final String name,
        final String password,
        final boolean inactive )
    {
        this.email = requireNonNull( email );
        this.name = requireNonNull( name );
        this.password = requireNonNull( password );
        this.inactive = inactive;
    }

    public Customer(
        final Integer id,
        final String email,
        final String name,
        final String password,
        final boolean inactive )
    {
        this.id = requireNonNull( id );
        this.email = requireNonNull( email );
        this.name = requireNonNull( name );
        this.password = requireNonNull( password );
        this.inactive = inactive;
    }

    public Integer getId()
    {
        return id;
    }

    public String getEmail()
    {
        return email;
    }

    public String getName()
    {
        return name;
    }

    public String getPassword()
    {
        return password;
    }

    public void setPassword(
        final String password )
    {
        this.password = password;
    }

    public boolean getInactive()
    {
        return inactive;
    }

    public void setInactive(
        final boolean inactive )
    {
        this.inactive = inactive;
    }

    public String toString()
    {
        return MoreObjects.toStringHelper( this )
            .add( "id", id )
            .add( "email", email )
            .add( "name", name )
            .add( "password", password )
            .add( "inactive", inactive )
            .toString();
    }

    @Override
    public boolean equals(
        final Object obj )
    {
        if( ! ( obj instanceof Customer ) ) {
            return false;
        }
        final Customer customer = (Customer) obj;
        return Objects.equals( id, customer.getId() )
            && Objects.equals( email, customer.getEmail() )
            && Objects.equals( name, customer.getName() )
            && Objects.equals( password, customer.getPassword() )
            && Objects.equals( inactive, customer.getInactive() );
    }

}
